generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InterestedIn {
  MALE
  FEMALE
  BOTH
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  isVerified          Boolean               @default(false)
  isAdmin             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sessions            Session[]
  verificationTokens  VerificationToken[]

  profile             Profile?
  swipes              Swipe[]               @relation("SwipeFromUser")
  matches             Match[]               @relation("MatchedUsers")
  messages            Message[]             @relation("UserMessages")

  Swipe               Swipe[]               @relation("SwipeToUser")

  Match               Match[]               @relation("MatchedUsers2")
}

model Session {
  id                  String                @id @default(uuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  token               String                @unique
  createdAt           DateTime              @default(now())
  expiresAt           DateTime
}

model VerificationToken {
  id                  String                @id @default(uuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  token               String                @unique
  expiresAt           DateTime              
  createdAt           DateTime              @default(now())
}

model Profile {
  id                  String                @id @default(uuid())
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id])
  username            String
  bio                 String?
  age                 Int
  gender              String
  interestedIn        InterestedIn
  location            String
  photos              Photo[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @default(now())
}

model Photo {
  id                  String                @id @default(uuid())
  url                 String
  profileId           String
  profile             Profile               @relation(fields: [profileId], references: [id])
}

model Swipe {
  id                  String                @id @default(uuid())
  fromUserId          String
  toUserId            String
  fromUser            User                  @relation("SwipeFromUser", fields: [fromUserId], references: [id])
  toUser              User                  @relation("SwipeToUser", fields: [toUserId], references: [id])
  isLike              Boolean               
  createdAt           DateTime              @default(now())
}

model Match {
  id                  String                @id @default(uuid())
  user1Id             String
  user2Id             String
  user1               User                  @relation("MatchedUsers", fields: [user1Id], references: [id])
  user2               User                  @relation("MatchedUsers2", fields: [user2Id], references: [id])
  createdAt           DateTime              @default(now())
  messages            Message[]
}

model Message {
  id                  String                 @id @default(uuid())
  senderId            String
  matchId             String
  content             String
  sentAt              DateTime               @default(now())
  sender              User                   @relation("UserMessages", fields: [senderId], references: [id])
  match               Match                  @relation(fields: [matchId], references: [id])
}
